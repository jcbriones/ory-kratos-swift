//
// UpdateVerificationFlowWithCodeMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateVerificationFlowWithCodeMethod: Codable, JSONEncodable, Hashable {

    public enum Method: String, Codable, CaseIterable {
        case link = "link"
        case code = "code"
    }
    /** Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well. */
    public var code: String?
    /** Sending the anti-csrf token is only required for browser login flows. */
    public var csrfToken: String?
    /** The email address to verify  If the email belongs to a valid account, a verifiation email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation#attempted-verification-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email */
    public var email: String?
    /** Method is the method that should be used for this verification flow  Allowed values are `link` and `code`. link VerificationStrategyLink code VerificationStrategyCode */
    public var method: Method

    public init(code: String? = nil, csrfToken: String? = nil, email: String? = nil, method: Method) {
        self.code = code
        self.csrfToken = csrfToken
        self.email = email
        self.method = method
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case csrfToken = "csrf_token"
        case email
        case method
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encode(method, forKey: .method)
    }
}

