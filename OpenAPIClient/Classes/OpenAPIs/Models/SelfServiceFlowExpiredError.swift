//
// SelfServiceFlowExpiredError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Is sent when a flow is expired */
public struct SelfServiceFlowExpiredError: Codable, JSONEncodable, Hashable {

    public var error: GenericError?
    /** When the flow has expired */
    public var expiredAt: Date?
    /** A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years. */
    public var since: Int64?
    /** The flow ID that should be used for the new flow as it contains the correct messages. */
    public var useFlowId: String?

    public init(error: GenericError? = nil, expiredAt: Date? = nil, since: Int64? = nil, useFlowId: String? = nil) {
        self.error = error
        self.expiredAt = expiredAt
        self.since = since
        self.useFlowId = useFlowId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case error
        case expiredAt = "expired_at"
        case since
        case useFlowId = "use_flow_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(expiredAt, forKey: .expiredAt)
        try container.encodeIfPresent(since, forKey: .since)
        try container.encodeIfPresent(useFlowId, forKey: .useFlowId)
    }
}

