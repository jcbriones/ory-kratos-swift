//
// OryUpdateRegistrationFlowWithPasskeyMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Registration Flow with Passkey Method */
public struct OryUpdateRegistrationFlowWithPasskeyMethod: Sendable, Codable, ParameterConvertible, Hashable {

    /** CSRFToken is the anti-CSRF token */
    public var csrfToken: String?
    /** Method  Should be set to \"passkey\" when trying to add, update, or remove a Passkey. */
    public var method: String
    /** Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    public var passkeyRegister: String?
    /** The identity's traits */
    public var traits: JSONValue
    /** Transient data to pass along to any webhooks */
    public var transientPayload: JSONValue?

    public init(csrfToken: String? = nil, method: String, passkeyRegister: String? = nil, traits: JSONValue, transientPayload: JSONValue? = nil) {
        self.csrfToken = csrfToken
        self.method = method
        self.passkeyRegister = passkeyRegister
        self.traits = traits
        self.transientPayload = transientPayload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case method
        case passkeyRegister = "passkey_register"
        case traits
        case transientPayload = "transient_payload"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(passkeyRegister, forKey: .passkeyRegister)
        try container.encode(traits, forKey: .traits)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
    }
}

