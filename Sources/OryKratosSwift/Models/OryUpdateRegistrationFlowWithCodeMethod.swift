//
// OryUpdateRegistrationFlowWithCodeMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Registration Flow with Code Method */
public struct OryUpdateRegistrationFlowWithCodeMethod: Sendable, Codable, ParameterConvertible, Hashable {

    /** The OTP Code sent to the user */
    public var code: String?
    /** The CSRF Token */
    public var csrfToken: String?
    /** Method to use  This field must be set to `code` when using the code method. */
    public var method: String
    /** Resend restarts the flow with a new code */
    public var resend: String?
    /** The identity's traits */
    public var traits: JSONValue
    /** Transient data to pass along to any webhooks */
    public var transientPayload: JSONValue?

    public init(code: String? = nil, csrfToken: String? = nil, method: String, resend: String? = nil, traits: JSONValue, transientPayload: JSONValue? = nil) {
        self.code = code
        self.csrfToken = csrfToken
        self.method = method
        self.resend = resend
        self.traits = traits
        self.transientPayload = transientPayload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case csrfToken = "csrf_token"
        case method
        case resend
        case traits
        case transientPayload = "transient_payload"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(resend, forKey: .resend)
        try container.encode(traits, forKey: .traits)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
    }
}

