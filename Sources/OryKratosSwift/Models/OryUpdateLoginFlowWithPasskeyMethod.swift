//
// OryUpdateLoginFlowWithPasskeyMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Login Flow with Passkey Method */
public struct OryUpdateLoginFlowWithPasskeyMethod: Sendable, Codable, ParameterConvertible, Hashable {

    /** Sending the anti-csrf token is only required for browser login flows. */
    public var csrfToken: String?
    /** Method should be set to \"passkey\" when logging in using the Passkey strategy. */
    public var method: String
    /** Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    public var passkeyLogin: String?

    public init(csrfToken: String? = nil, method: String, passkeyLogin: String? = nil) {
        self.csrfToken = csrfToken
        self.method = method
        self.passkeyLogin = passkeyLogin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case method
        case passkeyLogin = "passkey_login"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(passkeyLogin, forKey: .passkeyLogin)
    }
}

