//
// OryUpdateRecoveryFlowWithCodeMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Recovery Flow with Code Method */
public struct OryUpdateRecoveryFlowWithCodeMethod: Sendable, Codable, ParameterConvertible, Hashable {

    public enum OryMethod: String, Sendable, Codable, CaseIterable {
        case link = "link"
        case code = "code"
    }
    /** Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well. */
    public var code: String?
    /** Sending the anti-csrf token is only required for browser login flows. */
    public var csrfToken: String?
    /** The email address of the account to recover  If the email belongs to a valid account, a recovery email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email */
    public var email: String?
    /** Method is the method that should be used for this recovery flow  Allowed values are `link` and `code`. link RecoveryStrategyLink code RecoveryStrategyCode */
    public var method: OryMethod
    /** Transient data to pass along to any webhooks */
    public var transientPayload: JSONValue?

    public init(code: String? = nil, csrfToken: String? = nil, email: String? = nil, method: OryMethod, transientPayload: JSONValue? = nil) {
        self.code = code
        self.csrfToken = csrfToken
        self.email = email
        self.method = method
        self.transientPayload = transientPayload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case csrfToken = "csrf_token"
        case email
        case method
        case transientPayload = "transient_payload"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
    }
}

