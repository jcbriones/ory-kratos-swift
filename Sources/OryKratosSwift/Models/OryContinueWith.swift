//
// OryContinueWith.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public enum OryContinueWith: Sendable, Codable, ParameterConvertible, Hashable {
    case typeOryContinueWithRecoveryUi(OryContinueWithRecoveryUi)
    case typeOryContinueWithRedirectBrowserTo(OryContinueWithRedirectBrowserTo)
    case typeOryContinueWithSetOrySessionToken(OryContinueWithSetOrySessionToken)
    case typeOryContinueWithSettingsUi(OryContinueWithSettingsUi)
    case typeOryContinueWithVerificationUi(OryContinueWithVerificationUi)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeOryContinueWithRecoveryUi(let value):
            try container.encode(value)
        case .typeOryContinueWithRedirectBrowserTo(let value):
            try container.encode(value)
        case .typeOryContinueWithSetOrySessionToken(let value):
            try container.encode(value)
        case .typeOryContinueWithSettingsUi(let value):
            try container.encode(value)
        case .typeOryContinueWithVerificationUi(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(OryContinueWithRecoveryUi.self) {
            self = .typeOryContinueWithRecoveryUi(value)
        } else if let value = try? container.decode(OryContinueWithRedirectBrowserTo.self) {
            self = .typeOryContinueWithRedirectBrowserTo(value)
        } else if let value = try? container.decode(OryContinueWithSetOrySessionToken.self) {
            self = .typeOryContinueWithSetOrySessionToken(value)
        } else if let value = try? container.decode(OryContinueWithSettingsUi.self) {
            self = .typeOryContinueWithSettingsUi(value)
        } else if let value = try? container.decode(OryContinueWithVerificationUi.self) {
            self = .typeOryContinueWithVerificationUi(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of OryContinueWith"))
        }
    }
}

