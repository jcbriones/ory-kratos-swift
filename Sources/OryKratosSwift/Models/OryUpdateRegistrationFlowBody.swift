//
// OryUpdateRegistrationFlowBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Registration Request Body */
public enum OryUpdateRegistrationFlowBody: Sendable, Codable, ParameterConvertible, Hashable {
    case typeOryUpdateRegistrationFlowWithCodeMethod(OryUpdateRegistrationFlowWithCodeMethod)
    case typeOryUpdateRegistrationFlowWithOidcMethod(OryUpdateRegistrationFlowWithOidcMethod)
    case typeOryUpdateRegistrationFlowWithPasskeyMethod(OryUpdateRegistrationFlowWithPasskeyMethod)
    case typeOryUpdateRegistrationFlowWithPasswordMethod(OryUpdateRegistrationFlowWithPasswordMethod)
    case typeOryUpdateRegistrationFlowWithProfileMethod(OryUpdateRegistrationFlowWithProfileMethod)
    case typeOryUpdateRegistrationFlowWithWebAuthnMethod(OryUpdateRegistrationFlowWithWebAuthnMethod)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeOryUpdateRegistrationFlowWithCodeMethod(let value):
            try container.encode(value)
        case .typeOryUpdateRegistrationFlowWithOidcMethod(let value):
            try container.encode(value)
        case .typeOryUpdateRegistrationFlowWithPasskeyMethod(let value):
            try container.encode(value)
        case .typeOryUpdateRegistrationFlowWithPasswordMethod(let value):
            try container.encode(value)
        case .typeOryUpdateRegistrationFlowWithProfileMethod(let value):
            try container.encode(value)
        case .typeOryUpdateRegistrationFlowWithWebAuthnMethod(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(OryUpdateRegistrationFlowWithCodeMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithCodeMethod(value)
        } else if let value = try? container.decode(OryUpdateRegistrationFlowWithOidcMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithOidcMethod(value)
        } else if let value = try? container.decode(OryUpdateRegistrationFlowWithPasskeyMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithPasskeyMethod(value)
        } else if let value = try? container.decode(OryUpdateRegistrationFlowWithPasswordMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithPasswordMethod(value)
        } else if let value = try? container.decode(OryUpdateRegistrationFlowWithProfileMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithProfileMethod(value)
        } else if let value = try? container.decode(OryUpdateRegistrationFlowWithWebAuthnMethod.self) {
            self = .typeOryUpdateRegistrationFlowWithWebAuthnMethod(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of OryUpdateRegistrationFlowBody"))
        }
    }
}

