//
// OryUpdateLoginFlowBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public enum OryUpdateLoginFlowBody: Sendable, Codable, ParameterConvertible, Hashable {
    case typeOryUpdateLoginFlowWithCodeMethod(OryUpdateLoginFlowWithCodeMethod)
    case typeOryUpdateLoginFlowWithIdentifierFirstMethod(OryUpdateLoginFlowWithIdentifierFirstMethod)
    case typeOryUpdateLoginFlowWithLookupSecretMethod(OryUpdateLoginFlowWithLookupSecretMethod)
    case typeOryUpdateLoginFlowWithOidcMethod(OryUpdateLoginFlowWithOidcMethod)
    case typeOryUpdateLoginFlowWithPasskeyMethod(OryUpdateLoginFlowWithPasskeyMethod)
    case typeOryUpdateLoginFlowWithPasswordMethod(OryUpdateLoginFlowWithPasswordMethod)
    case typeOryUpdateLoginFlowWithTotpMethod(OryUpdateLoginFlowWithTotpMethod)
    case typeOryUpdateLoginFlowWithWebAuthnMethod(OryUpdateLoginFlowWithWebAuthnMethod)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeOryUpdateLoginFlowWithCodeMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithIdentifierFirstMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithLookupSecretMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithOidcMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithPasskeyMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithPasswordMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithTotpMethod(let value):
            try container.encode(value)
        case .typeOryUpdateLoginFlowWithWebAuthnMethod(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(OryUpdateLoginFlowWithCodeMethod.self) {
            self = .typeOryUpdateLoginFlowWithCodeMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithIdentifierFirstMethod.self) {
            self = .typeOryUpdateLoginFlowWithIdentifierFirstMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithLookupSecretMethod.self) {
            self = .typeOryUpdateLoginFlowWithLookupSecretMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithOidcMethod.self) {
            self = .typeOryUpdateLoginFlowWithOidcMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithPasskeyMethod.self) {
            self = .typeOryUpdateLoginFlowWithPasskeyMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithPasswordMethod.self) {
            self = .typeOryUpdateLoginFlowWithPasswordMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithTotpMethod.self) {
            self = .typeOryUpdateLoginFlowWithTotpMethod(value)
        } else if let value = try? container.decode(OryUpdateLoginFlowWithWebAuthnMethod.self) {
            self = .typeOryUpdateLoginFlowWithWebAuthnMethod(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of OryUpdateLoginFlowBody"))
        }
    }
}

