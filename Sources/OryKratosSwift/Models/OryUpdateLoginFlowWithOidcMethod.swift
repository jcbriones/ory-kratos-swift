//
// OryUpdateLoginFlowWithOidcMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Login Flow with OpenID Connect Method */
public struct OryUpdateLoginFlowWithOidcMethod: Sendable, Codable, ParameterConvertible, Hashable {

    /** The CSRF Token */
    public var csrfToken: String?
    /** IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google */
    public var idToken: String?
    /** IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and required. */
    public var idTokenNonce: String?
    /** Method to use  This field must be set to `oidc` when using the oidc method. */
    public var method: String
    /** The provider to register with */
    public var provider: String
    /** The identity traits. This is a placeholder for the registration flow. */
    public var traits: JSONValue?
    /** Transient data to pass along to any webhooks */
    public var transientPayload: JSONValue?
    /** UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`. */
    public var upstreamParameters: JSONValue?

    public init(csrfToken: String? = nil, idToken: String? = nil, idTokenNonce: String? = nil, method: String, provider: String, traits: JSONValue? = nil, transientPayload: JSONValue? = nil, upstreamParameters: JSONValue? = nil) {
        self.csrfToken = csrfToken
        self.idToken = idToken
        self.idTokenNonce = idTokenNonce
        self.method = method
        self.provider = provider
        self.traits = traits
        self.transientPayload = transientPayload
        self.upstreamParameters = upstreamParameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case idToken = "id_token"
        case idTokenNonce = "id_token_nonce"
        case method
        case provider
        case traits
        case transientPayload = "transient_payload"
        case upstreamParameters = "upstream_parameters"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encodeIfPresent(idToken, forKey: .idToken)
        try container.encodeIfPresent(idTokenNonce, forKey: .idTokenNonce)
        try container.encode(method, forKey: .method)
        try container.encode(provider, forKey: .provider)
        try container.encodeIfPresent(traits, forKey: .traits)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
        try container.encodeIfPresent(upstreamParameters, forKey: .upstreamParameters)
    }
}

