//
// OryRegistrationFlow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct OryRegistrationFlow: Sendable, Codable, ParameterConvertible, Hashable {

    public enum OryActive: String, Sendable, Codable, CaseIterable {
        case password = "password"
        case oidc = "oidc"
        case totp = "totp"
        case lookupSecret = "lookup_secret"
        case webauthn = "webauthn"
        case code = "code"
        case passkey = "passkey"
        case profile = "profile"
        case linkRecovery = "link_recovery"
        case codeRecovery = "code_recovery"
    }
    /** Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode */
    public var active: OryActive?
    /** ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated. */
    public var expiresAt: Date
    /** ID represents the flow's unique ID. When performing the registration flow, this represents the id in the registration ui's query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id> */
    public var id: String
    /** IssuedAt is the time (UTC) when the flow occurred. */
    public var issuedAt: Date
    /** Ory OAuth 2.0 Login Challenge.  This value is set using the `login_challenge` query parameter of the registration and login endpoints. If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider. */
    public var oauth2LoginChallenge: String?
    public var oauth2LoginRequest: OryOAuth2LoginRequest?
    public var organizationId: String?
    /** RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example. */
    public var requestUrl: String
    /** ReturnTo contains the requested return_to URL. */
    public var returnTo: String?
    /** SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed. This is only set if the client has requested a session token exchange code, and if the flow is of type \"api\", and only on creating the flow. */
    public var sessionTokenExchangeCode: String?
    /** State represents the state of this request:  choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed. */
    public var state: JSONValue?
    /** TransientPayload is used to pass data from the registration to a webhook */
    public var transientPayload: JSONValue?
    /** The flow type can either be `api` or `browser`. */
    public var type: String
    public var ui: OryUiContainer

    public init(active: OryActive? = nil, expiresAt: Date, id: String, issuedAt: Date, oauth2LoginChallenge: String? = nil, oauth2LoginRequest: OryOAuth2LoginRequest? = nil, organizationId: String? = nil, requestUrl: String, returnTo: String? = nil, sessionTokenExchangeCode: String? = nil, state: JSONValue?, transientPayload: JSONValue? = nil, type: String, ui: OryUiContainer) {
        self.active = active
        self.expiresAt = expiresAt
        self.id = id
        self.issuedAt = issuedAt
        self.oauth2LoginChallenge = oauth2LoginChallenge
        self.oauth2LoginRequest = oauth2LoginRequest
        self.organizationId = organizationId
        self.requestUrl = requestUrl
        self.returnTo = returnTo
        self.sessionTokenExchangeCode = sessionTokenExchangeCode
        self.state = state
        self.transientPayload = transientPayload
        self.type = type
        self.ui = ui
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case expiresAt = "expires_at"
        case id
        case issuedAt = "issued_at"
        case oauth2LoginChallenge = "oauth2_login_challenge"
        case oauth2LoginRequest = "oauth2_login_request"
        case organizationId = "organization_id"
        case requestUrl = "request_url"
        case returnTo = "return_to"
        case sessionTokenExchangeCode = "session_token_exchange_code"
        case state
        case transientPayload = "transient_payload"
        case type
        case ui
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(id, forKey: .id)
        try container.encode(issuedAt, forKey: .issuedAt)
        try container.encodeIfPresent(oauth2LoginChallenge, forKey: .oauth2LoginChallenge)
        try container.encodeIfPresent(oauth2LoginRequest, forKey: .oauth2LoginRequest)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encode(requestUrl, forKey: .requestUrl)
        try container.encodeIfPresent(returnTo, forKey: .returnTo)
        try container.encodeIfPresent(sessionTokenExchangeCode, forKey: .sessionTokenExchangeCode)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
        try container.encode(type, forKey: .type)
        try container.encode(ui, forKey: .ui)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension OryRegistrationFlow: Identifiable {}
