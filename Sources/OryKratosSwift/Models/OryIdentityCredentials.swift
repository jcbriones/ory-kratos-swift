//
// OryIdentityCredentials.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Credentials represents a specific credential type */
public struct OryIdentityCredentials: Sendable, Codable, ParameterConvertible, Hashable {

    public enum OryType: String, Sendable, Codable, CaseIterable {
        case password = "password"
        case oidc = "oidc"
        case totp = "totp"
        case lookupSecret = "lookup_secret"
        case webauthn = "webauthn"
        case code = "code"
        case passkey = "passkey"
        case profile = "profile"
        case linkRecovery = "link_recovery"
        case codeRecovery = "code_recovery"
    }
    public var config: JSONValue?
    /** CreatedAt is a helper struct field for gobuffalo.pop. */
    public var createdAt: Date?
    /** Identifiers represents a list of unique identifiers this credential type matches. */
    public var identifiers: [String]?
    /** Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode */
    public var type: OryType?
    /** UpdatedAt is a helper struct field for gobuffalo.pop. */
    public var updatedAt: Date?
    /** Version refers to the version of the credential. Useful when changing the config schema. */
    public var version: Int64?

    public init(config: JSONValue? = nil, createdAt: Date? = nil, identifiers: [String]? = nil, type: OryType? = nil, updatedAt: Date? = nil, version: Int64? = nil) {
        self.config = config
        self.createdAt = createdAt
        self.identifiers = identifiers
        self.type = type
        self.updatedAt = updatedAt
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case config
        case createdAt = "created_at"
        case identifiers
        case type
        case updatedAt = "updated_at"
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(version, forKey: .version)
    }
}

