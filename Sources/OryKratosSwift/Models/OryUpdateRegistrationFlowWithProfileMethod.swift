//
// OryUpdateRegistrationFlowWithProfileMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Update Registration Flow with Profile Method */
public struct OryUpdateRegistrationFlowWithProfileMethod: Sendable, Codable, ParameterConvertible, Hashable {

    public enum OryScreen: String, Sendable, Codable, CaseIterable {
        case credentialSelection = "credential-selection"
        case previous = "previous"
    }
    /** The Anti-CSRF Token  This token is only required when performing browser flows. */
    public var csrfToken: String?
    /** Method  Should be set to profile when trying to update a profile. */
    public var method: String
    /** Screen requests navigation to a previous screen.  This must be set to credential-selection to go back to the credential selection screen. credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential previous RegistrationScreenPrevious */
    public var screen: OryScreen?
    /** Traits  The identity's traits. */
    public var traits: JSONValue
    /** Transient data to pass along to any webhooks */
    public var transientPayload: JSONValue?

    public init(csrfToken: String? = nil, method: String, screen: OryScreen? = nil, traits: JSONValue, transientPayload: JSONValue? = nil) {
        self.csrfToken = csrfToken
        self.method = method
        self.screen = screen
        self.traits = traits
        self.transientPayload = transientPayload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case method
        case screen
        case traits
        case transientPayload = "transient_payload"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(screen, forKey: .screen)
        try container.encode(traits, forKey: .traits)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
    }
}

